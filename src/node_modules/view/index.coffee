View = require "ampersand-view"

module.exports = View.extend()

subviewCollection = require "bindings/collection/subview"

content_edited = (key) ->
	d3 = require "d3"
	() ->
		@model[key] = d3.select(@el)
			.select("[data-hook=#{key}]")
			.node().innerText

div_for = (key) ->
	"""<div data-hook="#{key}"></div>"""

default_prop_bindings_for = (key) ->
	hook: key

default_child_bindings_for = (key) ->
	hook: key
	type: (el, newVal, oldVal) ->
		if newVal?
			view = new newVal.view el:el, model:newVal
			view.render()

default_collection_bindings_for = (key) ->
	hook: key
	type: (el, newVal, oldVal) ->
		if newVal?
			ctor = (options) ->
				return new options.model.view options
			@renderCollection newVal, ctor, el

model_dot = (key) -> "model.#{key}"

module.exports.default_bindings_for = (schema) ->
	bindings = Object.assign {}, schema.bindings

	for key, value of schema.props
		bindings[model_dot key] ?= default_prop_bindings_for key

	for key, value of schema.children
		bindings[model_dot key] ?= default_child_bindings_for key

	for key, value of schema.collections
		bindings[model_dot key] ?= default_collection_bindings_for key

	bindings

change_model = (key) ->
	() ->
		@model[key] = @query("[data-hook=#{key}]").innerText

module.exports.default_events_for = (schema) ->
	events = Object.assign {}, schema.events

	for key, value of schema.props
		events["blur [data-hook=#{key}]"] = change_model(key)

	events

module.exports.for = (schema) ->
	divs = []
	for kind in ["props", "children", "collections"]
		divs = divs.concat (div_for(key) for key, value of schema[kind])

	defaultTemplate = "<div>" + divs.join("\n") + "</div>"

	View.extend
		bindings: module.exports.default_bindings_for schema
		events: module.exports.default_events_for schema
		template: defaultTemplate
